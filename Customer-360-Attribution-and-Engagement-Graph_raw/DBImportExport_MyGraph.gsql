CREATE GRAPH MyGraph(Account, Campaign, Contact, Lead, CampaignMember, Opportunity, Industry, LeadSource, belongs_to, converted, is_active_as, is_part_of, Has_Role, Has, Is_Driven_By, is_connected_to, belongs_to_industry, created_by, is_from, comes_from, comes_from_the, is_for_the)
set exit_on_error = "false"
CREATE LOADING JOB load_job_Lead_csv_1563673669708 FOR GRAPH MyGraph {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Lead VALUES($0, $4, $5, _, $9, $11, $12, $24, $25, $26, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $43, $44, $46, $64, $65, $66, $67, $68, $69, $70, $71, $74, $57, $76, $77, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99, $100, $101, $102, $103, $104, $105, $107, $109, $111, $112) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE comes_from VALUES($24, $0) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE converted VALUES($0, $35) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE comes_from_the VALUES($0, $26) USING SEPARATOR=",", HEADER="true", EOL="\n";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_job_OpportunityContactRole_csv_1563677101360 FOR GRAPH MyGraph {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO EDGE Has_Role VALUES($2, $1, $3, $0) USING SEPARATOR=",", HEADER="true", EOL="\n";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_job_Campaign_csv_1563677947043 FOR GRAPH MyGraph {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Campaign VALUES($0, $2, $3, $4, $5, $6, $7, $9, $10, $13, $14, $15, $16, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $33, $34, $35, $36, $38, $39) USING SEPARATOR=",", HEADER="true", EOL="\n";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_job_CampaignMember_csv_1563678358158 FOR GRAPH MyGraph {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX CampaignMember VALUES($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE is_part_of VALUES($0, $2) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE is_connected_to VALUES($4, $0) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE is_active_as VALUES($3, $0) USING SEPARATOR=",", HEADER="true", EOL="\n";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_job_Opportunity_csv_1566421101084 FOR GRAPH MyGraph {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Opportunity VALUES($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $36, $37, $38, $41, $43, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE Has VALUES($2, $0) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE Is_Driven_By VALUES($0, $20) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_job_Account_csv_1566426944186 FOR GRAPH MyGraph {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Account VALUES($0, $3, $5, $6, $7, $8, $9, $10, $22, $25, $27, $28, $29, $32, $35, $36, $37, $38, $39, $41, $44) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO VERTEX Industry VALUES($27) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO VERTEX LeadSource VALUES($44) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE belongs_to_industry VALUES($0, $27) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE created_by VALUES($0, $44) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_job_Contact_csv_1572998079132 FOR GRAPH MyGraph {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Contact VALUES($0, $4, $5, $13, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $30, $31, $32, $33, $35, $36) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO VERTEX LeadSource VALUES($19) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE belongs_to VALUES($0, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE is_from VALUES($0, $19) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

set exit_on_error = "true"
CREATE QUERY CustomerJourney(vertex<Contact> customer, set<string> campaignTypes, datetime startTime, datetime endTime) FOR GRAPH MyGraph {
/*
  Sample input:
	    Contact: Sam-Eisenberg
	    startTime: 2018-06-01
	    endTime: 2018-10-01
*/
	
	SumAccum<string> @camType, @camName, @camDesc;
	Customer = { customer };
  print Customer;
	Company = select t from Customer -(belongs_to)-> Account:t;
	print Company;
	campaign = select c
	           from Customer-(is_connected_to)-> CampaignMember:c
	           where c.CreatedDate >= startTime and c.CreatedDate <= endTime
	           ;
	campaign = select c from campaign:c -(is_part_of)-> Campaign:t
	           where campaignTypes.size() == 0 or t.Campaign_Type in campaignTypes
	           accum c.@camType = t.Campaign_Type,
	                 c.@camName = t.Name,
	                 c.@camDesc = t.Description;
	print campaign as Campaign;
}
CREATE QUERY SimilarCustomers(VERTEX<Contact> sourceCustomer, set<string> campaignTypes, INT topK) FOR GRAPH MyGraph {
/*
  This query calculates the Jaccard Similarity between a given customer (of type Contact) and
  every other customers (or Contacts) who share similar campaigns (of type Campaign).
	The topK "similar" customers are printed out.
	
	SAMPLE INPUT:
	    Contact: Sam-Eisenberg
	    campaignTypes:
		          Webinar
							Demo Signup / Trial
		  topK: 5
	
  A Jaccard Similarity score is calculated for each similar customer (who share similar Campaigns 
	                  with the input sourceCustomer)
  The set of similar customers is sorted with the topK # customers printed out.
	
  Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
	
	More info:
	  How to find Jaccard similarity?
	      https://www.youtube.com/watch?v=5RRyzjvC5z4
	  Similarity Algorithms in GSQL
	      https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/examples/Similarity
*/
        SumAccum<INT> @intersection_size, @@set_size_A, @set_size_B;
        SumAccum<FLOAT> @similarity;

        A(ANY) = {sourceCustomer};

        A = SELECT s
        	  FROM A:s
            ACCUM @@set_size_A += s.outdegree("is_connected_to");

        // From A set (Contact), traverse 'is_connected_to' edges to all CampaignMember s
        CampaignMembersSet = SELECT t
            FROM A:s -(is_connected_to:e)-> CampaignMember:t;

	      // From CampaignMember s, traverse 'is_part_of' edges to Campaign s, for all 
	      // desired campaignTypes (eg. Webinar, Website Direct, Demo Signup/Trial)
        CampaignSet = SELECT t
            FROM CampaignMembersSet -(is_part_of:e)-> Campaign:t
	          WHERE campaignTypes.size() == 0 OR (t.Campaign_Type in campaignTypes);

	      // From Campaign s, traverse 'reverse_is_part_of' edges back to all CampaignMember s
        CampaignMembersSet = SELECT t
            FROM CampaignSet:s -(reverse_is_part_of:e)-> CampaignMember:t;

	      // From CampaignMember s, traverse 'reverse_is_connected_to' edges back to Contacts (B set)
	      // For each Contact in B set, accumulate the intersection size of the shared Campaigns, and 
	      //   compute it's Jaccard Similarity score as
	      //     Jaccard similarity = intersection_size / size of the Union of (A set + B set)
	      //                        = intersection_size / (size_A + size_B - intersection_size)
        B = SELECT t
            FROM CampaignMembersSet:s -(reverse_is_connected_to:e)-> Contact:t
            WHERE t != sourceCustomer
            ACCUM t.@intersection_size += 1,
                       t.@set_size_B = t.outdegree("is_connected_to")
            POST-ACCUM t.@similarity = t.@intersection_size*1.0/
	                                    (@@set_size_A + t.@set_size_B - t.@intersection_size)
            ORDER BY t.@similarity DESC
            LIMIT topK;

        //PRINT B;
	      PRINT B[B.FirstName, B.LastName, B.@similarity];
}
CREATE QUERY CustJourney_Subgraph(vertex<Contact> customer, vertex<Opportunity> opportunity) FOR GRAPH MyGraph { 
/*
  Sample input:
	  Contact: Sam-Eisenberg
	  opportunity: 0063600000gEoe0AAC

*/
	SetAccum<edge> @@displaySet;
  SetAccum<vertex> @@vertexSet;

	cust = { customer };
		
	acct = select t from cust:c -(belongs_to:e)-> Account:t
	       accum @@displaySet += e, @@vertexSet += t;
	
  opp = select t from cust -(Has_Role:e)-> Opportunity:t 
	      accum @@displaySet += e, @@vertexSet += t;
	
	campaign_members =
	        select t
	        from cust -(is_connected_to:e)-> CampaignMember:t
	        accum @@vertexSet += cust, @@vertexSet += t, @@displaySet += e;
	
	campaigns = select t from campaign_members -(is_part_of:e)-> Campaign:t
	            accum @@vertexSet += t, @@displaySet += e;
	
	Verts = @@vertexSet;
	
	print Verts;
	//print@@vertexSet;

	print @@displaySet;
}
