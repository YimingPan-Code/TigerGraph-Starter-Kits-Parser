CREATE LOADING JOB PatientInfoJob FOR GRAPH MyGraph {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Patient VALUES($0, $1, $3, $9, $12, $13, $14, $15, $16, $17, $8, $2) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE BELONGS_TO_CASE VALUES($0, $9) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE INFECTED_BY VALUES($0, $11) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE BIRTH_STAMP VALUES($3, $0) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE PATIENT_FROM_CITY VALUES($0, $7) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE PATIENT_FROM_PROVINCE VALUES($0, $6) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE PATIENT_FROM_COUNTRY VALUES($0, $5) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE CITY_IN_PROVINCE VALUES($7, $6) USING SEPARATOR=",", HEADER="true", EOL="\n";
      LOAD MyDataSource TO EDGE PROVINCE_IN_COUNTRY VALUES($5, $6) USING SEPARATOR=",", HEADER="true", EOL="\n";
    }


CREATE DISTRIBUTED QUERY pageRank (FLOAT maxChange, INT maxIter, FLOAT damping, BOOL display, INT outputLimit) FOR GRAPH MyGraph{
# Compute the pageRank score for each vertex in the GRAPH
# In each iteration, compute a score for each vertex:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# The pageRank algorithm stops when either of the following is true:
#  a) it reaches maxIter iterations;
#  b) the max score change for any vertex compared to the last iteration <= maxChange.

        TYPEDEF TUPLE<vertex Vertex_ID, FLOAT score> vertexScore;
        HeapAccum<vertexScore>(outputLimit, score DESC) @@topScores;
        MaxAccum<float> @@maxDiff = 9999; # max score change in an iteration
        SumAccum<float> @received_score = 0; # sum of scores each vertex receives FROM neighbors
        SumAccum<float> @score = 1;   # Initial score for every vertex is 1.
        SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed

        Start = {Patient.*};   #  Start with all vertices of specified type(s)
        WHILE @@maxDiff > maxChange LIMIT maxIter DO
                @@maxDiff = 0;
                V = SELECT s
                    FROM Start:s -(INFECTED_BY:e)-> :t
                    ACCUM t.@received_score += s.@score/(s.outdegree("INFECTED_BY")) 
                    POST-ACCUM s.@score = (1.0-damping) + damping * s.@received_score,
                               s.@received_score = 0,
                               @@maxDiff += abs(s.@score - s.@score');
        END; # END WHILE loop


        IF outputLimit > 0 THEN
                V = SELECT s FROM Start:s
                    POST-ACCUM @@topScores += vertexScore(s, s.@score);
                PRINT @@topScores;
        END;


        IF display THEN
                PRINT Start[Start.@score];
                Start = SELECT s
                        FROM Start:s -(INFECTED_BY:e)-> :t
                        ACCUM @@edgeSet += e;
                PRINT @@edgeSet;
        END;
}